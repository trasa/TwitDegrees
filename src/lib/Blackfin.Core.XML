<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Blackfin.Core</name>
    </assembly>
    <members>
        <member name="M:Blackfin.Core.Assemblies.IAttributeCatalog.GetAttributes``1">
            <summary>
            Gets the instances of the target Attribute from the current AppDomain.
            </summary>
            <returns>a Collection of Attribute instances matching the target</returns>
            <typeparam name="T">The Attribute type we seek</typeparam>
        </member>
        <member name="T:Blackfin.Core.Assemblies.AttributeCatalog">
            <summary>
            Searches through the current application domain, looking for types and
            information denoted by a given <see cref="T:System.Attribute"/>.
            </summary>
        </member>
        <member name="M:Blackfin.Core.Assemblies.AttributeCatalog.GetAttributes``1">
            <summary>
            Gets the instances of the target Attribute from the current AppDomain.
            </summary>
            <returns>a Collection of Attribute instances matching the target</returns>
            <typeparam name="T">The Attribute type we seek</typeparam>
        </member>
        <member name="T:Blackfin.Core.Assemblies.AttributeCatalogEntry`1">
            <summary>
            An object that pairs an attribute instance to the Type it was tagged against.
            </summary>
            <typeparam name="T">The <see cref="P:Blackfin.Core.Assemblies.AttributeCatalogEntry`1.Attribute"/> we seek.</typeparam>
        </member>
        <member name="M:Blackfin.Core.Assemblies.AttributeCatalogEntry`1.#ctor(`0,System.Type)">
            <summary>
            Create an instance of an AttributeCatalogEntry.
            </summary>
            <param name="attribute">The attribute.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Blackfin.Core.Assemblies.AttributeCatalogEntry`1.op_Equality(Blackfin.Core.Assemblies.AttributeCatalogEntry{`0},Blackfin.Core.Assemblies.AttributeCatalogEntry{`0})">
            <summary>
            Compare two AttributeCatalogEntry objects for equality.
            </summary>
            <param name="left">The left hand side of the comparison.</param>
            <param name="right">the right hand side of the comparison.</param>
            <returns>True if the two objects are equal, otherwise false.</returns>
        </member>
        <member name="M:Blackfin.Core.Assemblies.AttributeCatalogEntry`1.op_Inequality(Blackfin.Core.Assemblies.AttributeCatalogEntry{`0},Blackfin.Core.Assemblies.AttributeCatalogEntry{`0})">
            <summary>
            Compare two AttributeCatalogEntry objects for inequality.
            </summary>
            <param name="left">The left hand side of the comparison.</param>
            <param name="right">the right hand side of the comparison.</param>
            <returns>True if the two objects are not equal, otherwise false.</returns>
        </member>
        <member name="M:Blackfin.Core.Assemblies.AttributeCatalogEntry`1.Equals(System.Object)">
            <summary>
            Test for equality between this instance and a given object.
            </summary>
            <param name="obj">Object to test against</param>
            <returns>True if this object is equal to obj</returns>
        </member>
        <member name="M:Blackfin.Core.Assemblies.AttributeCatalogEntry`1.GetHashCode">
             <summary>
             Get the HashCode for this AttributeCatalogEntry 
             </summary>
             <remarks>
            		<list type="number">
            			<item><description>
            				Two Objects that are Equal <b>MUST</b> generate the same HashCode.
            			</description></item>
            			<item><description>
            				An Object's HashCode <b>MUST</b> be Instance-Invariant 
            				(See below for definition of Instance Invariant)
            			</description></item>
            			<item><description>
            				For best performance, HashCode should be generated as a random distribution across all integers.
            			</description></item>
            		</list>
            		<br/>
            		<note type="caution">Breaking Rule 1 and 2 will break your class in creative and hard-to-debug ways!</note>
            		<br/>
            		<list type="definition">
            			<item>
            				<term><b>Instance Invariant</b></term>
            				<description>
            					A Value is Instance Invariant if it does not change over the entire life of the object 
            					(from Constructor through Finalizer) -- designated in C# by the "readonly" keyword.
            				</description>
            			</item>
            		</list>
             </remarks>
            	<example>
             Declaring an Instance Invariant value:
            		<code>
            			private readonly string someReadOnlyValue;
            
            			public AttributeCatalogEntry(string s) 
            			{
            				someReadOnlyValue = s; 
            			}
             
            			public override int GetHashCode()
            			{
            				return s.GetHashCode();
            			}
            		</code>
            	</example>
             <returns>an integer obeying the rules for HashCode values.</returns>
        </member>
        <member name="P:Blackfin.Core.Assemblies.AttributeCatalogEntry`1.Attribute">
            <summary>
            Gets the attribute.
            </summary>
            <value>The attribute.</value>
        </member>
        <member name="P:Blackfin.Core.Assemblies.AttributeCatalogEntry`1.AttributeTargetType">
            <summary>
            Gets the Type that this attribute was tagged against.
            </summary>
            <value>The type of the attribute target.</value>
        </member>
        <member name="T:Blackfin.Core.Assemblies.AttributeCollection`1">
            <summary>
            A Collection of AttributeCatalogEntries.
            </summary>
            <typeparam name="T">Some sort of Attribute</typeparam>
        </member>
        <member name="M:Blackfin.Core.Assemblies.AttributeCollection`1.GetAttributes">
            <summary>
            Gets the attributes.
            </summary>
            <returns>List of Attributes</returns>
        </member>
        <member name="M:Blackfin.Core.Assemblies.AttributeCollection`1.GetTypes">
            <summary>
            Gets the types.
            </summary>
            <returns>list of types</returns>
        </member>
        <member name="T:Blackfin.Core.Assemblies.ITypeCatalog">
            <summary>
            Searches through the current application domain, looking for types.
            </summary>
        </member>
        <member name="M:Blackfin.Core.Assemblies.ITypeCatalog.EnsureAssemblyIsLoaded(System.Type)">
            <summary>
            Ensures the assembly that this type is defined in is loaded into the current AppDomain.
            </summary>
            <param name="t">The type that is a member of the Assembly you want to load.</param>
        </member>
        <member name="M:Blackfin.Core.Assemblies.ITypeCatalog.GetTypesInheritedFrom``1">
            <summary>
            Gets all the types inherited (including) this type.
            </summary>
            <typeparam name="T">Type</typeparam>
            <returns>List of Types</returns>
        </member>
        <member name="M:Blackfin.Core.Assemblies.ITypeCatalog.GetTypesWithAttribute``1">
            <summary>
            Gets the types with this attribute.
            </summary>
            <typeparam name="T">Attribute</typeparam>
            <returns>List of Types</returns>
        </member>
        <member name="M:Blackfin.Core.Assemblies.ITypeCatalog.GetTypesImplementing``1(System.Boolean)">
            <summary>
            Gets the types that implement T.
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="includingInterfaceItself">if set to <c>true</c> include the interface in the results, too.</param>
            <returns>List of Types</returns>
        </member>
        <member name="M:Blackfin.Core.Assemblies.ITypeCatalog.GetTypesImplementing``1">
            <summary>
            Gets the types that implement T.
            </summary>
            <typeparam name="T">Type</typeparam>
            <returns>List of Types</returns>
        </member>
        <member name="M:Blackfin.Core.Assemblies.ITypeCatalog.GetTypesWithName(System.String)">
            <summary>
            Finds the type with this name.  Makes some guesses about locations.
            </summary>
            <remarks>
            If you have multiple types w
            </remarks>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:Blackfin.Core.Assemblies.TypeCatalog">
            <summary>
            Searches through the current application domain, looking for types.
            </summary>
        </member>
        <member name="M:Blackfin.Core.Assemblies.TypeCatalog.EnsureAssemblyIsLoaded(System.Type)">
            <summary>
            Ensures the assembly that this type is defined in is loaded into the current AppDomain.
            </summary>
            <param name="t">The type that is a member of the Assembly you want to load.</param>
        </member>
        <member name="M:Blackfin.Core.Assemblies.TypeCatalog.GetTypesInheritedFrom``1">
            <summary>
            Gets all the types inherited (including) this type.
            </summary>
            <typeparam name="T">Type</typeparam>
            <returns>List of Types</returns>
        </member>
        <member name="M:Blackfin.Core.Assemblies.TypeCatalog.GetTypesImplementing``1">
            <summary>
            Gets the types that implement T.
            </summary>
            <typeparam name="T">Type</typeparam>
            <returns>List of Types</returns>
        </member>
        <member name="M:Blackfin.Core.Assemblies.TypeCatalog.GetTypesImplementing``1(System.Boolean)">
            <summary>
            Gets the types that implement T.
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="includingInterfaceItself">if set to <c>true</c> include the interface in the results, too.</param>
            <returns>List of Types</returns>
        </member>
        <member name="M:Blackfin.Core.Assemblies.TypeCatalog.GetTypesWithAttribute``1">
            <summary>
            Gets the types with this attribute.
            </summary>
            <typeparam name="T">Attribute</typeparam>
            <returns>List of Types</returns>
        </member>
        <member name="M:Blackfin.Core.Assemblies.TypeCatalog.GetTypes(System.Reflection.TypeFilter)">
            <summary>
            Gets the instances of the target Attribute from the current AppDomain.
            </summary>
            <param name="filter">The filter.</param>
            <returns>
            a Collection of Attribute instances matching the target
            </returns>
        </member>
        <member name="M:Blackfin.Core.Assemblies.TypeCatalog.GetTypes(System.Reflection.TypeFilter,System.Object)">
            <summary>
            Gets the instances of the target Attribute from the current AppDomain.
            </summary>
            <param name="filter">The filter.</param>
            <param name="filterCriteria">The filter criteria.</param>
            <returns>
            a Collection of Attribute instances matching the target
            </returns>
        </member>
        <member name="M:Blackfin.Core.Assemblies.TypeCatalog.FilterTypesByInheritedType``1(System.Type,System.Object)">
            <summary>
            For use with TypeCatalog, as a TypeFilter - include only the types
            that inherit from the provided type.
            </summary>
            <param name="m">The m.</param>
            <param name="filterCriteria">The filter criteria.</param>
            <returns></returns>
        </member>
        <member name="M:Blackfin.Core.Assemblies.TypeCatalog.FilterTypesByAttribute``1(System.Type,System.Object)">
            <summary>
            A TypeFilter that includes only the types that have an instance of the given attribute.
            </summary>
            <typeparam name="TAttribute">The type of the attribute.</typeparam>
            <param name="m">The m.</param>
            <param name="filterCriteria">The filter criteria.</param>
            <returns></returns>
        </member>
        <member name="M:Blackfin.Core.Assemblies.TypeCatalog.GetTypesInAssembly(System.Reflection.Assembly,System.Reflection.TypeFilter,System.Collections.Generic.List{System.Type},System.Object)">
            <summary>
            Get the types that match these criteria in this assembly.
            </summary>
            <param name="asm">The assembly to search.</param>
            <param name="filter">The filter.</param>
            <param name="types">The types.</param>
            <param name="filterCriteria">The filter criteria.</param>
        </member>
        <member name="M:Blackfin.Core.Assemblies.TypeCatalog.GetTypesInModule(System.Reflection.Module,System.Reflection.TypeFilter,System.Collections.Generic.List{System.Type},System.Object)">
            <summary>
            Gets the instances of the target attribute from this module.
            </summary>
            <param name="mod">The module to search.</param>
            <param name="filter">The filter.</param>
            <param name="types">The types.</param>
            <param name="filterCriteria">The filter criteria.</param>
        </member>
        <member name="T:Blackfin.Core.Collections.CachingDictionary`2">
            <summary>
            A common, thread-safe way to cache objects with a key.
            </summary>
        </member>
        <member name="M:Blackfin.Core.Collections.CachingDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Attempts to get a value out of the dictionary with the key.
            </summary>
        </member>
        <member name="M:Blackfin.Core.Collections.CachingDictionary`2.GetOrBuildValue(`0,Blackfin.Core.Collections.CachingDictionary{`0,`1}.ValueFactory)">
            <summary>
            If the key does not exist in the cache, it will call factory to build the value and insert it into the cache.
            If the key does exists, it returns the value for it.
            </summary>
        </member>
        <member name="M:Blackfin.Core.Collections.CachingDictionary`2.Clear">
            <summary>
            Clears all entries in the cache.
            </summary>
        </member>
        <member name="T:Blackfin.Core.Collections.CachingDictionary`2.ValueFactory">
            <summary>
            Defines a method that will generate a cache value from a key.
            </summary>
        </member>
        <member name="M:Blackfin.Core.Collections.ListDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Does this Dictionary contain this key, and does the list stored under that key also contain this value?
            </summary>
            <param name="keyValuePair"></param>
            <returns></returns>
        </member>
        <member name="P:Blackfin.Core.Collections.ListDictionary`2.TotalValueCount">
            <summary>
            TotalValueCount is the total number of all the values in all of the lists added to this ListDictionary.
            (Count is the total number of keys (and lists) added to this ListDictionary.)
            </summary>
        </member>
        <member name="T:Blackfin.Core.Collections.ReverseComparer`1">
            <summary>
            Reverses the operation of a Comparer.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Blackfin.Core.Collections.ReverseComparer`1.#ctor">
            <summary>
            Reverses the operation of Comparer[T].Default
            </summary>
        </member>
        <member name="M:Blackfin.Core.Collections.ReverseComparer`1.#ctor(System.Collections.Generic.Comparer{`0})">
            <summary>
            Reverses the operation of a Comparer[T] of your choice.
            </summary>
            <param name="comparerToReverse"></param>
        </member>
        <member name="T:Blackfin.Core.Common.ContextStorage">
            <summary>
            Store items in appropriate context - if running under HTTP context, store there.
            Otherwise, store in thread context.
            </summary>
        </member>
        <member name="M:Blackfin.Core.Common.ContextStorage.Store(System.String,System.Object)">
            <summary>
            Stores the object to context storage using the specified key.  Returns
            value to indicate which context storage was used.
            </summary>
            <param name="key">The mapping key.</param>
            <param name="obj">The object to be stored.</param>
            <returns>True if stored in HTTP context, false if stored in thread context.</returns>
        </member>
        <member name="M:Blackfin.Core.Common.ContextStorage.Get(System.String)">
            <summary>
            Gets the specified object mapped to key from context storage.
            </summary>
            <param name="key">The key.</param>
            <returns>object mapped to key</returns>
        </member>
        <member name="M:Blackfin.Core.Common.ContextStorage.StoreInHttpContext(System.String,System.Object)">
            <summary>
            Stores object in HTTP context.
            </summary>
            <param name="key">The key.</param>
            <param name="obj">The object to be mapped.</param>
        </member>
        <member name="M:Blackfin.Core.Common.ContextStorage.GetFromHttpContext(System.String)">
            <summary>
            Gets object mapped to key from HTTP context.
            </summary>
            <param name="key">The key.</param>
            <returns>The object mapped to key</returns>
        </member>
        <member name="M:Blackfin.Core.Common.ContextStorage.StoreInThreadContext(System.String,System.Object)">
            <summary>
            Stores object in thread context.
            </summary>
            <param name="key">The key.</param>
            <param name="obj">The object mapped to key</param>
        </member>
        <member name="M:Blackfin.Core.Common.ContextStorage.GetFromThreadContext(System.String)">
            <summary>
            Gets object mapped to key from thread context.
            </summary>
            <param name="key">The key.</param>
            <returns>object mapped to key</returns>
        </member>
        <member name="T:Blackfin.Core.Conversion.ConvertNullable">
            <summary>
            Conversion for Nullable types.
            </summary>
        </member>
        <member name="M:Blackfin.Core.Conversion.ConvertNullable.ToInt64(System.String)">
            <summary>
            Convert string to Int64.
            </summary>
            <param name="value">The value.</param>
            <returns>Int64</returns>
        </member>
        <member name="T:Blackfin.Core.Data.Linq.IDataContext">
            <summary>
            Interface to a DataContext
            </summary>
        </member>
        <member name="M:Blackfin.Core.Data.Linq.IDataContext.SubmitChanges">
            <summary>
            Submits the changes.
            </summary>
        </member>
        <member name="M:Blackfin.Core.Data.Linq.IDataContext.SubmitChanges(System.Data.Linq.ConflictMode)">
            <summary>
            Submits the changes.
            </summary>
            <param name="conflictMode">The conflict mode.</param>
        </member>
        <member name="M:Blackfin.Core.Data.Linq.IDataContext.GetTable``1">
            <summary>
            Gets the table corresponding to this type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Blackfin.Core.Data.Linq.IDataContext.InsertOnSubmit``1(``0)">
            <summary>
            Should provide implementation for GetTable().InsertOnSubmit(entity);
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Blackfin.Core.Data.Linq.IDataContext.DeleteOnSubmit``1(``0)">
            <summary>
            Should provide implementation for GetTable().DeleteOnSubmit(entity);
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Blackfin.Core.Data.Linq.IDataContext.DeleteAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Should provide implementation for GetTable().DeleteAllOnSubmit(entities);
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entities">The entities.</param>
        </member>
        <member name="T:Blackfin.Core.Exceptions.InvalidStateException">
            <summary>
            Exception thrown when inconsistent or invalid data is found.
            </summary>
        </member>
        <member name="M:Blackfin.Core.Exceptions.InvalidStateException.#ctor">
            <summary>
            Create a InvalidStateException.
            </summary>
        </member>
        <member name="M:Blackfin.Core.Exceptions.InvalidStateException.#ctor(System.String)">
            <summary>
            Create a InvalidStateException.
            </summary>	
            <param name="msg">A Message describing the details of the exception.</param>
        </member>
        <member name="M:Blackfin.Core.Exceptions.InvalidStateException.#ctor(System.String,System.Exception)">
            <summary>
            Create a InvalidStateException.
            </summary>
            <param name="msg">A Message describing the details of the exception</param>
            <param name="inner">Details of an inner exception</param>
        </member>
        <member name="M:Blackfin.Core.Exceptions.InvalidStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create a InvalidStateException. 
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Blackfin.Core.Exceptions.InvalidStateException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Streams all the exception properties into the SerializationInfo class for the given StreamingContext.
            </summary>
            <param name="info">The SerializationInfo object.</param>
            <param name="context">The StreamingContext object.</param>
            <example>
            	<code>
            		base.GetObjectData(info, context);
            		// TODO: your values here
            		info.AddValue("variableName", variableName);
            	</code>
            </example>
        </member>
        <member name="T:Blackfin.Core.Extensions.DictionaryExtensions">
            <summary>
            Extension methods for things IDictionary
            </summary>
        </member>
        <member name="M:Blackfin.Core.Extensions.DictionaryExtensions.ForEach``2(System.Collections.Generic.IDictionary{``0,``1},System.Action{``0,``1})">
            <summary>
            Perform this action over each item in the dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Blackfin.Core.Extensions.DictionaryExtensions.ForEach``2(System.Collections.Generic.IDictionary{``0,``1},System.Action{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Perform this action over each item in the dictionary.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="action">The action.</param>
        </member>
        <member name="T:Blackfin.Core.Extensions.DropDownListExtensions">
            <summary>
            Extensions for the DropDownList Web Control.
            </summary>
        </member>
        <member name="M:Blackfin.Core.Extensions.DropDownListExtensions.SelectByValue(System.Web.UI.WebControls.DropDownList,System.String)">
            <summary>
            Selects by value.
            </summary>
            <param name="dropDownList">The drop down list.</param>
            <param name="value">The value.</param>
            <returns>ListItem</returns>
        </member>
        <member name="M:Blackfin.Core.Extensions.DropDownListExtensions.SelectByText(System.Web.UI.WebControls.DropDownList,System.String)">
            <summary>
            Selects the item by text.
            </summary>
            <param name="dropDownList">The drop down list.</param>
            <param name="text">The text.</param>
            <returns>selected item or null if not found</returns>
        </member>
        <member name="T:Blackfin.Core.Extensions.EnumerableExtensions">
            <summary>
            Extensions methods for IEnumerable collections.
            </summary>
        </member>
        <member name="M:Blackfin.Core.Extensions.EnumerableExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether the specified collection is null or empty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <returns>
            	<c>true</c> if the collection is null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Blackfin.Core.Extensions.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            For Each, do.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Blackfin.Core.Extensions.EnumerableExtensions.ContainsAtLeast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Determines whether the enumeration contains at least count items.
            </summary>
            <remarks>This is from Omer van Kloeten's blog: http://weblogs.asp.net/okloeten/archive/2008/04/06/6070885.aspx</remarks>
            <typeparam name="T"></typeparam>
            <param name="enumeration">The enumeration.</param>
            <param name="count">The count.</param>
            <returns>
            	<c>true</c> if the enumeration has at least count items.
            </returns>
        </member>
        <member name="M:Blackfin.Core.Extensions.EnumerableExtensions.AggregationOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Collections.Generic.IEnumerable{``0},``0})">
            <summary>
            Return the aggregationMethod result, or default is the enumeration is empty.
            </summary>
            <remarks>This is from Omer van Kloeten's blog: http://weblogs.asp.net/okloeten/archive/2008/04/06/6070885.aspx</remarks>
            <typeparam name="T"></typeparam>
            <param name="enumeration">The enumeration.</param>
            <param name="aggregationMethod">The aggregation method.</param>
            <returns>result of aggregationMethod or Default is enumeration is empty.</returns>
        </member>
        <member name="M:Blackfin.Core.Extensions.EnumerableExtensions.Join(System.Collections.Generic.IEnumerable{System.String},System.String,System.String,System.String)">
            <summary>
            Joins each string in the enumerable, prepends the start string, and appends the end string.
            </summary>
        </member>
        <member name="M:Blackfin.Core.Extensions.EnumerableExtensions.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Joins each string in the enumerable
            </summary>
        </member>
        <member name="T:Blackfin.Core.Extensions.EnumExtensions">
            <summary>
            Helper class for interacting with Enums.
            </summary>
            <author>jwalker</author>
        </member>
        <member name="M:Blackfin.Core.Extensions.EnumExtensions.GetDescription(System.Enum)">
            <summary>
            Given an enum value, it will attempt to return the Description attribute value related to it.
            </summary>
            <example><code>
            enum Colors { [Description("Bright Yellow")] BrightYellow };
            EnumHelper.GetDescription(Colors.BrightYellow);</code> would return "Bright Yellow"
            </example>
            <remarks>
            Uses reflection, so be prepared to accept that performance hit if you use this.
            </remarks>
            <author>jwalker</author>
        </member>
        <member name="M:Blackfin.Core.Extensions.EnumExtensions.Parse``1(System.String)">
            <summary>
            Parses the specified input into an enum.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="input">The input.</param>
            <returns>the enum value</returns>
        </member>
        <member name="M:Blackfin.Core.Extensions.EnumExtensions.TryParse``1(System.String,``0@)">
            <summary>
            Tries to parse the specified input into an enum.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="input">The input.</param>
            <param name="result">The result, if successful.</param>
            <returns>true if successful, false otherwise.</returns>
        </member>
        <member name="M:Blackfin.Core.Extensions.EnumExtensions.TryParse``1(System.String,``0,``0@)">
            <summary>
            Tries to parse the specified input into an enum.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="input">The input.</param>
            <param name="defaultValue">The default value to return as result, if the parsing operation fails.</param>
            <param name="result">The result, if successful.</param>
            <returns>true if successful, false otherwise.</returns>
        </member>
        <member name="M:Blackfin.Core.Extensions.EnumExtensions.ToKeyValuePair``1">
            <summary>
            Turns this Enum into a List of KeyValuePairs: the Enum Name and Value.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <returns>The Enum Name ("None") and the enum value (0)</returns>
        </member>
        <member name="M:Blackfin.Core.Extensions.EnumExtensions.IsDefined``1(System.Object)">
            <summary>
            Determines whether the specified value is defined in this Enum.
            </summary>
            <typeparam name="TEnum">The type of the enum.</typeparam>
            <param name="value">The value.</param>
            <returns>
            	<c>true</c> if the specified value is defined; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Blackfin.Core.Extensions.ListExtensions">
            <summary>
            Extensions for Lists
            </summary>
        </member>
        <member name="M:Blackfin.Core.Extensions.ListExtensions.ToCollection``1(System.Collections.Generic.IList{``0})">
            <summary>
            Converts a List[T] to a Collection[T]
            </summary>
            <param name="list">The list to convert.</param>
            <returns>Collection of the List[T]</returns>
        </member>
        <member name="M:Blackfin.Core.Extensions.ListExtensions.ConvertAll``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1})">
            <summary>
            Converts all the input type to the output type.
            </summary>
            <typeparam name="TInput">The type of the input.</typeparam>
            <typeparam name="TOutput">The type of the output.</typeparam>
            <param name="list">The list.</param>
            <param name="converter">The converter.</param>
            <returns></returns>
        </member>
        <member name="M:Blackfin.Core.Extensions.ListExtensions.AddAll``1(System.Collections.Generic.IList{``0},System.Collections.IEnumerable)">
            <summary>
            Adds all the elements into this list.
            </summary>
            <param name="list">The list.</param>
            <param name="items">The items to add.  everything in this MUST be convertable to T, or an exception will occur.</param>
        </member>
        <member name="M:Blackfin.Core.Extensions.ListExtensions.ToListOf``1(System.Collections.IList)">
            <summary>
            Converts a non-generic list to a generic list.
            </summary>
            <remarks>
            See http://bloggingabout.net/blogs/ramon/archive/2007/06/18/in-search-for-the-fastest-ilist-to-ilist-lt-t-gt-conversion.aspx
            for evidence of why this might be the most performant way to go about doing this.
            </remarks>
            <typeparam name="T"></typeparam>
            <param name="list">The list to convert.</param>
            <returns>a new list of T.</returns>
        </member>
        <member name="T:Blackfin.Core.Extensions.StateBagExtensions">
            <summary>
            Extensions for StateBag object.  (Also known as "ViewState".)
            </summary>
        </member>
        <member name="M:Blackfin.Core.Extensions.StateBagExtensions.Get``1(System.Web.UI.StateBag,System.String)">
            <summary>
            Gets an item out of the bag.
            </summary>
            <typeparam name="T">Type we're retrieving</typeparam>
            <param name="bag">The bag.</param>
            <param name="name">The name of the object we want.</param>
            <returns>the object, or Default(T) if not found</returns>
        </member>
        <member name="M:Blackfin.Core.Extensions.StateBagExtensions.Get``1(System.Web.UI.StateBag,System.String,``0)">
            <summary>
            Gets an item out of the bag.
            </summary>
            <typeparam name="T">Type we're retrieving</typeparam>
            <param name="bag">The bag.</param>
            <param name="name">The name of the object we want.</param>
            <param name="defaultValue">The value to return if the key is not found.</param>
            <returns>the object, or defaultValue if not found</returns>
        </member>
        <member name="T:Blackfin.Core.Extensions.StringExtensions">
            <summary>
            Extensions for Strings
            </summary>
        </member>
        <member name="M:Blackfin.Core.Extensions.StringExtensions.TrimToMaxLength(System.String,System.Int32)">
            <summary>
            Trims the string, chopping it off at a maximum length if needed.
            </summary>
            <param name="s">The s.</param>
            <param name="maxLength">Length of the max.</param>
            <returns></returns>
        </member>
        <member name="M:Blackfin.Core.Extensions.StringExtensions.EndsWith(System.String,System.Char)">
            <summary>
            Determine if this string ends with the character value.
            </summary>
            <remarks>
            This method is provided in the System.String class but its internal.
            </remarks>
            <param name="s">The string to check.</param>
            <param name="value">The value to check for.</param>
            <returns>true if s ends with value, false otherwise.</returns>
        </member>
        <member name="M:Blackfin.Core.Extensions.StringExtensions.IsNullOrTrimEmpty(System.String)">
            <summary>
            Determines whether this string is null or empty (after you trim it)
            </summary>
            <param name="s">The s.</param>
            <returns>
            	<c>true</c> if [is null or trim empty] [the specified s]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Blackfin.Core.IO.Directory">
            <summary>
            Implementation of <see cref="T:System.IO.Directory"/>
            </summary>
        </member>
        <member name="T:Blackfin.Core.IO.IDirectory">
            <summary>Interface for acting with directories.</summary>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectory.CreateDirectory(System.String)">
            <summary>Creates all directories and subdirectories as specified by path.</summary>
            <returns>A <see cref="T:System.IO.DirectoryInfo"></see> as specified by path.</returns>
            <param name="path">The directory path to create. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.IOException">The directory specified by path is read-only or is not empty.-or-A file with the same name and location specified by path exists. </exception>
            <exception cref="T:System.NotSupportedException">An attempt was made to create a directory with only the colon character (:). </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectory.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>Creates all the directories in the specified path, applying the specified Windows security.</summary>
            <returns>A <see cref="T:System.IO.DirectoryInfo"></see> object representing the newly created directory.</returns>
            <param name="directorySecurity">The access control to apply to the directory.</param>
            <param name="path">The directory to create.</param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.IOException">The directory specified by path is read-only or is not empty. -or-A file with the same name and location specified by path exists.-or-The directory is the application's current working directory.</exception>
            <exception cref="T:System.NotSupportedException">An attempt was made to create a directory using only the colon  character (:). </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectory.Delete(System.String)">
            <summary>Deletes an empty directory from a specified path.</summary>
            <param name="path">The name of the empty directory to remove. This directory must be writable or empty. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.IOException">A file with the same name and location specifiedby path exists.-or-The directory is the application's current working directory.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectory.Delete(System.String,System.Boolean)">
            <summary>Deletes the specified directory and, if indicated, any subdirectories in the directory.</summary>
            <param name="recursive">true to remove directories, subdirectories, and files in path; otherwise, false. </param>
            <param name="path">The name of the directory to remove. </param>
            <exception cref="T:System.IO.IOException">A file with the same name and location specifiedby path exists.-or-The directory specified by path is read-only, or recursive is false and path is not an empty directory.-or-The directory is the application's current working directory. </exception>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectory.Exists(System.String)">
            <summary>Determines whether the given path refers to an existing directory on disk.</summary>
            <returns>true if path refers to an existing directory; otherwise, false.</returns>
            <param name="path">The path to test. </param>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectory.GetAccessControl(System.String)">
            <summary>Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"></see> object that encapsulates the access control list (ACL) entries for a specified directory.</summary>
            <returns>A <see cref="T:System.Security.AccessControl.DirectorySecurity"></see> object that encapsulates the access control rules for the file described by the path parameter.</returns>
            <param name="path">The path to a directory containing a <see cref="T:System.Security.AccessControl.DirectorySecurity"></see> object that describes the file's access control list (ACL) information.</param>
            <exception cref="T:System.UnauthorizedAccessException">The path parameter specified a directory that is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows 2000 or later.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the directory.</exception>
            <exception cref="T:System.SystemException">The directory could not be found.</exception>
            <exception cref="T:System.ArgumentNullException">The path parameter is null.</exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectory.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"></see> object that encapsulates the specified type of access control list (ACL) entries for a specified directory.</summary>
            <returns>A <see cref="T:System.Security.AccessControl.DirectorySecurity"></see> object that encapsulates the access control rules for the file described by the path parameter.</returns>
            <param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections"></see> values that specifies the type of access control list (ACL) information to receive.</param>
            <param name="path">The path to a directory containing a <see cref="T:System.Security.AccessControl.DirectorySecurity"></see> object that describes the file's access control list (ACL) information.</param>
            <exception cref="T:System.UnauthorizedAccessException">The path parameter specified a directory that is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows 2000 or later.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the directory.</exception>
            <exception cref="T:System.SystemException">The directory could not be found.</exception>
            <exception cref="T:System.ArgumentNullException">The path parameter is null.</exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectory.GetCreationTime(System.String)">
            <summary>Gets the creation date and time of a directory.</summary>
            <returns>A <see cref="T:System.DateTime"></see> structure set to the creation date and time for the specified directory. This value is expressed in local time.</returns>
            <param name="path">The path of the directory. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.IOException">The specified path was not found. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectory.GetCreationTimeUtc(System.String)">
            <summary>Gets the creation date and time, in Coordinated Universal Time (UTC) format, of a directory.</summary>
            <returns>A <see cref="T:System.DateTime"></see> structure set to the creation date and time for the specified directory. This value is expressed in UTC time.</returns>
            <param name="path">The path of the directory. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.IOException">The specified path was not found. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <filterpriority>2</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectory.GetCurrentDirectory">
            <summary>Gets the current working directory of the application.</summary>
            <returns>A string containing the path of the current working directory.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.NotSupportedException">The operating system is Windows CE, which does not have current directory functionality.This method is available in the .NET Compact Framework, but is not currently supported.</exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectory.GetDirectories(System.String)">
            <summary>Gets the names of subdirectories in the specified directory.</summary>
            <returns>An array of type String containing the names of subdirectories in path.</returns>
            <param name="path">The path for which an array of subdirectory names is returned. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.IOException">path is a file name. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectory.GetDirectories(System.String,System.String)">
            <summary>Gets an array of directories matching the specified search pattern from the current directory.</summary>
            <returns>A String array of directories matching the search pattern.</returns>
            <param name="path">The path to search. </param>
            <param name="searchPattern">The search string to match against the names of files in path. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by <see cref="F:System.IO.Path.DirectorySeparatorChar"></see> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar"></see>, nor can it contain any of the characters in System.IO.Path.InvalidPathChars. </param>
            <exception cref="T:System.ArgumentNullException">path or searchPattern is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.IOException">path is a file name. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars.-or- searchPattern does not contain a valid pattern. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectory.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>Gets an array of directories matching the specified search pattern from the current directory, using a value to determine whether to search subdirectories.</summary>
            <returns>A String array of directories matching the search pattern.</returns>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"></see> values that specifies whether the search operation should include all subdirectories or only the current directory.</param>
            <param name="path">The path to search. </param>
            <param name="searchPattern">The search string to match against the names of files in path. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by <see cref="F:System.IO.Path.DirectorySeparatorChar"></see> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar"></see>, nor can it contain any of the characters in System.IO.Path.InvalidPathChars. </param>
            <exception cref="T:System.ArgumentNullException">path or searchPattern is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.IOException">path is a file name. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars.-or- searchPattern does not contain a valid pattern. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectory.GetDirectoryRoot(System.String)">
            <summary>Returns the volume information, root information, or both for the specified path.</summary>
            <returns>A string containing the volume information, root information, or both for the specified path.</returns>
            <param name="path">The path of a file or directory. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectory.GetFiles(System.String)">
            <summary>Returns the names of files in the specified directory.</summary>
            <returns>A String array of file names in the specified directory. File names include the full path.</returns>
            <param name="path">The directory from which to retrieve the files. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.IOException">path is a file name. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectory.GetFiles(System.String,System.String)">
            <summary>Returns the names of files in the specified directory that match the specified search pattern.</summary>
            <returns>A String array containing the names of files in the specified directory that match the specified search pattern. File names include the full path.</returns>
            <param name="path">The directory to search. </param>
            <param name="searchPattern">The search string to match against the names of files in path. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by <see cref="F:System.IO.Path.DirectorySeparatorChar"></see> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar"></see>, nor can it contain any of the characters in System.IO.Path.InvalidPathChars. </param>
            <exception cref="T:System.ArgumentNullException">path or searchPattern is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars.-or- searchPattern does not contain a valid pattern. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectory.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns the names of files in the specified directory that match the specified search pattern, using a value to determine whether to search subdirectories.</summary>
            <returns>A String array containing the names of files in the specified directory that match the specified search pattern. File names include the full path.</returns>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"></see> values that specifies whether the search operation should include all subdirectories or only the current directory.</param>
            <param name="path">The directory to search. </param>
            <param name="searchPattern">The search string to match against the names of files in path. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by <see cref="F:System.IO.Path.DirectorySeparatorChar"></see> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar"></see>, nor can it contain any of the characters in System.IO.Path.InvalidPathChars. </param>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.ArgumentNullException">path or searchpattern is null.</exception>
            <exception cref="T:System.IO.IOException">path is a file name. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. -or- searchPattern does not contain a valid pattern.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectory.GetFileSystemEntries(System.String)">
            <summary>Returns the names of all files and subdirectories in the specified directory.</summary>
            <returns>A String array containing the names of file system entries in the specified directory.</returns>
            <param name="path">The directory for which file and subdirectory names are returned. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.IOException">path is a file name. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectory.GetFileSystemEntries(System.String,System.String)">
            <summary>Returns an array of file system entries matching the specified search criteria.</summary>
            <returns>A String array of file system entries matching the search criteria.</returns>
            <param name="path">The path to be searched. </param>
            <param name="searchPattern">The search string to match against the names of files in path. The searchPattern parameter cannot end in two periods ("..") or contain two periods ("..") followed by <see cref="F:System.IO.Path.DirectorySeparatorChar"></see> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar"></see>, nor can it contain any of the characters in System.IO.Path.InvalidPathChars. </param>
            <exception cref="T:System.ArgumentNullException">path or searchPattern is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.IOException">path is a file name. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars.-or- searchPattern does not contain a valid pattern. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectory.GetLastAccessTime(System.String)">
            <summary>Returns the date and time the specified file or directory was last accessed.</summary>
            <returns>A <see cref="T:System.DateTime"></see> structure set to the date and time the specified file or directory was last accessed. This value is expressed in local time.</returns>
            <param name="path">The file or directory for which to obtain access date and time information. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.IOException">The specified path was not found. </exception>
            <exception cref="T:System.NotSupportedException">The path parameter is in an invalid format. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectory.GetLastAccessTimeUtc(System.String)">
            <summary>Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed.</summary>
            <returns>A <see cref="T:System.DateTime"></see> structure set to the date and time the specified file or directory was last accessed. This value is expressed in UTC time.</returns>
            <param name="path">The file or directory for which to obtain access date and time information. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.IOException">The specified path was not found. </exception>
            <exception cref="T:System.NotSupportedException">The path parameter is in an invalid format. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectory.GetLastWriteTime(System.String)">
            <summary>Returns the date and time the specified file or directory was last written to.</summary>
            <returns>A <see cref="T:System.DateTime"></see> structure set to the date and time the specified file or directory was last written to. This value is expressed in local time.</returns>
            <param name="path">The file or directory for which to obtain modification date and time information. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.IOException">The specified path was not found. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectory.GetLastWriteTimeUtc(System.String)">
            <summary>Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last written to.</summary>
            <returns>A <see cref="T:System.DateTime"></see> structure set to the date and time the specified file or directory was last written to. This value is expressed in UTC time.</returns>
            <param name="path">The file or directory for which to obtain modification date and time information. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.IOException">The specified path was not found. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <filterpriority>2</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectory.GetLogicalDrives">
            <summary>Retrieves the names of the logical drives on this computer in the form "&lt;drive letter&gt;:\".</summary>
            <returns>The logical drives on this computer.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occured (for example, a disk error). </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectory.GetParent(System.String)">
            <summary>Retrieves the parent directory of the specified path, including both absolute and relative paths.</summary>
            <returns>The parent directory, or null if path is the root directory, including the root of a UNC server or share name.</returns>
            <param name="path">The path for which to retrieve the parent directory. </param>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path was not found. </exception>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.IOException">The directory specified by path is read-only. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectory.Move(System.String,System.String)">
            <summary>Moves a file or a directory and its contents to a new location.</summary>
            <param name="sourceDirName">The path of the file or directory to move. </param>
            <param name="destDirName">The path to the new location for sourceDirName. </param>
            <exception cref="T:System.ArgumentException">sourceDirName or destDirName is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.IOException">An attempt was made to move a directory to a different volume. -or- destDirName already exists. -or- The sourceDirName and destDirName parameters refer to the same file or directory. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.ArgumentNullException">sourceDirName or destDirName is null. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified by sourceDirName is invalid (for example, it is on an unmapped drive). </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.DirectorySecurity"></see> object to the specified directory.</summary>
            <param name="directorySecurity">A <see cref="T:System.Security.AccessControl.DirectorySecurity"></see> object that describes an ACL entry to apply to the directory described by the path parameter.</param>
            <param name="path">A directory to add or remove access control list (ACL) entries from.</param>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows 2000 or later.</exception>
            <exception cref="T:System.ArgumentException">The path was invalid.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The directory could not be found.</exception>
            <exception cref="T:System.ArgumentNullException">The directorySecurity parameter is null.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The current process does not have access to open the file.</exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectory.SetCreationTime(System.String,System.DateTime)">
            <summary>Sets the creation date and time for the specified file or directory.</summary>
            <param name="creationTime">A <see cref="T:System.DateTime"></see> containing the value to set for the creation date and time of path. This value is expressed in local time. </param>
            <param name="path">The file or directory for which to set the creation date and time information. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">creationTime specifies a value outside the range of dates or times permitted for this operation. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectory.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>Sets the creation date and time, in Coordinated Universal Time (UTC) format, for the specified file or directory.</summary>
            <param name="creationTimeUtc">A <see cref="T:System.DateTime"></see> containing the value to set for the creation date and time of path. This value is expressed in UTC time. </param>
            <param name="path">The file or directory for which to set the creation date and time information. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">creationTime specifies a value outside the range of dates or times permitted for this operation. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
            <filterpriority>2</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectory.SetCurrentDirectory(System.String)">
            <summary>Sets the application's current working directory to the specified directory.</summary>
            <param name="path">The path to which the current working directory is set. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.IO.IOException">An IO error occurred. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access unmanaged code. </exception>
            <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectory.SetLastAccessTime(System.String,System.DateTime)">
            <summary>Sets the date and time the specified file or directory was last accessed.</summary>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"></see> containing the value to set for the access date and time of path. This value is expressed in local time. </param>
            <param name="path">The file or directory for which to set the access date and time information. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectory.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed.</summary>
            <param name="lastAccessTimeUtc">A <see cref="T:System.DateTime"></see> containing the value to set for the access date and time of path. This value is expressed in UTC time. </param>
            <param name="path">The file or directory for which to set the access date and time information. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectory.SetLastWriteTime(System.String,System.DateTime)">
            <summary>Sets the date and time a directory was last written to.</summary>
            <param name="lastWriteTime">The date and time the directory was last written to. This value is expressed in local time. </param>
            <param name="path">The path of the directory. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectory.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in Coordinated Universal Time (UTC) format, that a directory was last written to.</summary>
            <param name="lastWriteTimeUtc">The date and time the directory was last written to. This value is expressed in UTC time. </param>
            <param name="path">The path of the directory. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
            <filterpriority>2</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.Directory.CreateDirectory(System.String)">
            <summary>Creates all directories and subdirectories as specified by path.</summary>
            <returns>A <see cref="T:System.IO.DirectoryInfo"></see> as specified by path.</returns>
            <param name="path">The directory path to create. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.IOException">The directory specified by path is read-only or is not empty.-or-A file with the same name and location specified by path exists. </exception>
            <exception cref="T:System.NotSupportedException">An attempt was made to create a directory with only the colon character (:). </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.Directory.CreateDirectory(System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>Creates all the directories in the specified path, applying the specified Windows security.</summary>
            <returns>A <see cref="T:System.IO.DirectoryInfo"></see> object representing the newly created directory.</returns>
            <param name="directorySecurity">The access control to apply to the directory.</param>
            <param name="path">The directory to create.</param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.IOException">The directory specified by path is read-only or is not empty. -or-A file with the same name and location specified by path exists.-or-The directory is the application's current working directory.</exception>
            <exception cref="T:System.NotSupportedException">An attempt was made to create a directory using only the colon  character (:). </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.Directory.Delete(System.String)">
            <summary>Deletes an empty directory from a specified path.</summary>
            <param name="path">The name of the empty directory to remove. This directory must be writable or empty. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.IOException">A file with the same name and location specifiedby path exists.-or-The directory is the application's current working directory.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.Directory.Delete(System.String,System.Boolean)">
            <summary>Deletes the specified directory and, if indicated, any subdirectories in the directory.</summary>
            <param name="recursive">true to remove directories, subdirectories, and files in path; otherwise, false. </param>
            <param name="path">The name of the directory to remove. </param>
            <exception cref="T:System.IO.IOException">A file with the same name and location specifiedby path exists.-or-The directory specified by path is read-only, or recursive is false and path is not an empty directory.-or-The directory is the application's current working directory. </exception>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.Directory.Exists(System.String)">
            <summary>Determines whether the given path refers to an existing directory on disk.</summary>
            <returns>true if path refers to an existing directory; otherwise, false.</returns>
            <param name="path">The path to test. </param>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.Directory.GetAccessControl(System.String)">
            <summary>Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"></see> object that encapsulates the access control list (ACL) entries for a specified directory.</summary>
            <returns>A <see cref="T:System.Security.AccessControl.DirectorySecurity"></see> object that encapsulates the access control rules for the file described by the path parameter.</returns>
            <param name="path">The path to a directory containing a <see cref="T:System.Security.AccessControl.DirectorySecurity"></see> object that describes the file's access control list (ACL) information.</param>
            <exception cref="T:System.UnauthorizedAccessException">The path parameter specified a directory that is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows 2000 or later.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the directory.</exception>
            <exception cref="T:System.SystemException">The directory could not be found.</exception>
            <exception cref="T:System.ArgumentNullException">The path parameter is null.</exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.Directory.GetAccessControl(System.String,System.Security.AccessControl.AccessControlSections)">
            <summary>Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"></see> object that encapsulates the specified type of access control list (ACL) entries for a specified directory.</summary>
            <returns>A <see cref="T:System.Security.AccessControl.DirectorySecurity"></see> object that encapsulates the access control rules for the file described by the path parameter.</returns>
            <param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections"></see> values that specifies the type of access control list (ACL) information to receive.</param>
            <param name="path">The path to a directory containing a <see cref="T:System.Security.AccessControl.DirectorySecurity"></see> object that describes the file's access control list (ACL) information.</param>
            <exception cref="T:System.UnauthorizedAccessException">The path parameter specified a directory that is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows 2000 or later.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the directory.</exception>
            <exception cref="T:System.SystemException">The directory could not be found.</exception>
            <exception cref="T:System.ArgumentNullException">The path parameter is null.</exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.Directory.GetCreationTime(System.String)">
            <summary>Gets the creation date and time of a directory.</summary>
            <returns>A <see cref="T:System.DateTime"></see> structure set to the creation date and time for the specified directory. This value is expressed in local time.</returns>
            <param name="path">The path of the directory. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.IOException">The specified path was not found. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.Directory.GetCreationTimeUtc(System.String)">
            <summary>Gets the creation date and time, in Coordinated Universal Time (UTC) format, of a directory.</summary>
            <returns>A <see cref="T:System.DateTime"></see> structure set to the creation date and time for the specified directory. This value is expressed in UTC time.</returns>
            <param name="path">The path of the directory. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.IOException">The specified path was not found. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <filterpriority>2</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.Directory.GetCurrentDirectory">
            <summary>Gets the current working directory of the application.</summary>
            <returns>A string containing the path of the current working directory.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.NotSupportedException">The operating system is Windows CE, which does not have current directory functionality.This method is available in the .NET Compact Framework, but is not currently supported.</exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.Directory.GetDirectories(System.String)">
            <summary>Gets the names of subdirectories in the specified directory.</summary>
            <returns>An array of type String containing the names of subdirectories in path.</returns>
            <param name="path">The path for which an array of subdirectory names is returned. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.IOException">path is a file name. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.Directory.GetDirectories(System.String,System.String)">
            <summary>Gets an array of directories matching the specified search pattern from the current directory.</summary>
            <returns>A String array of directories matching the search pattern.</returns>
            <param name="path">The path to search. </param>
            <param name="searchPattern">The search string to match against the names of files in path. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by <see cref="F:System.IO.Path.DirectorySeparatorChar"></see> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar"></see>, nor can it contain any of the characters in System.IO.Path.InvalidPathChars. </param>
            <exception cref="T:System.ArgumentNullException">path or searchPattern is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.IOException">path is a file name. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars.-or- searchPattern does not contain a valid pattern. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.Directory.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>Gets an array of directories matching the specified search pattern from the current directory, using a value to determine whether to search subdirectories.</summary>
            <returns>A String array of directories matching the search pattern.</returns>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"></see> values that specifies whether the search operation should include all subdirectories or only the current directory.</param>
            <param name="path">The path to search. </param>
            <param name="searchPattern">The search string to match against the names of files in path. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by <see cref="F:System.IO.Path.DirectorySeparatorChar"></see> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar"></see>, nor can it contain any of the characters in System.IO.Path.InvalidPathChars. </param>
            <exception cref="T:System.ArgumentNullException">path or searchPattern is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.IOException">path is a file name. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars.-or- searchPattern does not contain a valid pattern. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
        </member>
        <member name="M:Blackfin.Core.IO.Directory.GetDirectoryRoot(System.String)">
            <summary>Returns the volume information, root information, or both for the specified path.</summary>
            <returns>A string containing the volume information, root information, or both for the specified path.</returns>
            <param name="path">The path of a file or directory. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.Directory.GetFiles(System.String)">
            <summary>Returns the names of files in the specified directory.</summary>
            <returns>A String array of file names in the specified directory. File names include the full path.</returns>
            <param name="path">The directory from which to retrieve the files. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.IOException">path is a file name. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.Directory.GetFiles(System.String,System.String)">
            <summary>Returns the names of files in the specified directory that match the specified search pattern.</summary>
            <returns>A String array containing the names of files in the specified directory that match the specified search pattern. File names include the full path.</returns>
            <param name="path">The directory to search. </param>
            <param name="searchPattern">The search string to match against the names of files in path. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by <see cref="F:System.IO.Path.DirectorySeparatorChar"></see> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar"></see>, nor can it contain any of the characters in System.IO.Path.InvalidPathChars. </param>
            <exception cref="T:System.ArgumentNullException">path or searchPattern is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars.-or- searchPattern does not contain a valid pattern. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.Directory.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>Returns the names of files in the specified directory that match the specified search pattern, using a value to determine whether to search subdirectories.</summary>
            <returns>A String array containing the names of files in the specified directory that match the specified search pattern. File names include the full path.</returns>
            <param name="searchOption">One of the <see cref="T:System.IO.SearchOption"></see> values that specifies whether the search operation should include all subdirectories or only the current directory.</param>
            <param name="path">The directory to search. </param>
            <param name="searchPattern">The search string to match against the names of files in path. The parameter cannot end in two periods ("..") or contain two periods ("..") followed by <see cref="F:System.IO.Path.DirectorySeparatorChar"></see> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar"></see>, nor can it contain any of the characters in System.IO.Path.InvalidPathChars. </param>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.ArgumentNullException">path or searchpattern is null.</exception>
            <exception cref="T:System.IO.IOException">path is a file name. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. -or- searchPattern does not contain a valid pattern.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
        </member>
        <member name="M:Blackfin.Core.IO.Directory.GetFileSystemEntries(System.String)">
            <summary>Returns the names of all files and subdirectories in the specified directory.</summary>
            <returns>A String array containing the names of file system entries in the specified directory.</returns>
            <param name="path">The directory for which file and subdirectory names are returned. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.IOException">path is a file name. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.Directory.GetFileSystemEntries(System.String,System.String)">
            <summary>Returns an array of file system entries matching the specified search criteria.</summary>
            <returns>A String array of file system entries matching the search criteria.</returns>
            <param name="path">The path to be searched. </param>
            <param name="searchPattern">The search string to match against the names of files in path. The searchPattern parameter cannot end in two periods ("..") or contain two periods ("..") followed by <see cref="F:System.IO.Path.DirectorySeparatorChar"></see> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar"></see>, nor can it contain any of the characters in System.IO.Path.InvalidPathChars. </param>
            <exception cref="T:System.ArgumentNullException">path or searchPattern is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.IOException">path is a file name. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars.-or- searchPattern does not contain a valid pattern. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.Directory.GetLastAccessTime(System.String)">
            <summary>Returns the date and time the specified file or directory was last accessed.</summary>
            <returns>A <see cref="T:System.DateTime"></see> structure set to the date and time the specified file or directory was last accessed. This value is expressed in local time.</returns>
            <param name="path">The file or directory for which to obtain access date and time information. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.IOException">The specified path was not found. </exception>
            <exception cref="T:System.NotSupportedException">The path parameter is in an invalid format. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.Directory.GetLastAccessTimeUtc(System.String)">
            <summary>Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed.</summary>
            <returns>A <see cref="T:System.DateTime"></see> structure set to the date and time the specified file or directory was last accessed. This value is expressed in UTC time.</returns>
            <param name="path">The file or directory for which to obtain access date and time information. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.IOException">The specified path was not found. </exception>
            <exception cref="T:System.NotSupportedException">The path parameter is in an invalid format. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.Directory.GetLastWriteTime(System.String)">
            <summary>Returns the date and time the specified file or directory was last written to.</summary>
            <returns>A <see cref="T:System.DateTime"></see> structure set to the date and time the specified file or directory was last written to. This value is expressed in local time.</returns>
            <param name="path">The file or directory for which to obtain modification date and time information. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.IOException">The specified path was not found. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.Directory.GetLastWriteTimeUtc(System.String)">
            <summary>Returns the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last written to.</summary>
            <returns>A <see cref="T:System.DateTime"></see> structure set to the date and time the specified file or directory was last written to. This value is expressed in UTC time.</returns>
            <param name="path">The file or directory for which to obtain modification date and time information. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.IOException">The specified path was not found. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <filterpriority>2</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.Directory.GetLogicalDrives">
            <summary>Retrieves the names of the logical drives on this computer in the form "&lt;drive letter&gt;:\".</summary>
            <returns>The logical drives on this computer.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occured (for example, a disk error). </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.Directory.GetParent(System.String)">
            <summary>Retrieves the parent directory of the specified path, including both absolute and relative paths.</summary>
            <returns>The parent directory, or null if path is the root directory, including the root of a UNC server or share name.</returns>
            <param name="path">The path for which to retrieve the parent directory. </param>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path was not found. </exception>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.IOException">The directory specified by path is read-only. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.Directory.Move(System.String,System.String)">
            <summary>Moves a file or a directory and its contents to a new location.</summary>
            <param name="sourceDirName">The path of the file or directory to move. </param>
            <param name="destDirName">The path to the new location for sourceDirName. </param>
            <exception cref="T:System.ArgumentException">sourceDirName or destDirName is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.IOException">An attempt was made to move a directory to a different volume. -or- destDirName already exists. -or- The sourceDirName and destDirName parameters refer to the same file or directory. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.ArgumentNullException">sourceDirName or destDirName is null. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path specified by sourceDirName is invalid (for example, it is on an unmapped drive). </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.Directory.SetAccessControl(System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.DirectorySecurity"></see> object to the specified directory.</summary>
            <param name="directorySecurity">A <see cref="T:System.Security.AccessControl.DirectorySecurity"></see> object that describes an ACL entry to apply to the directory described by the path parameter.</param>
            <param name="path">A directory to add or remove access control list (ACL) entries from.</param>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows 2000 or later.</exception>
            <exception cref="T:System.ArgumentException">The path was invalid.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The directory could not be found.</exception>
            <exception cref="T:System.ArgumentNullException">The directorySecurity parameter is null.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The current process does not have access to open the file.</exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.Directory.SetCreationTime(System.String,System.DateTime)">
            <summary>Sets the creation date and time for the specified file or directory.</summary>
            <param name="creationTime">A <see cref="T:System.DateTime"></see> containing the value to set for the creation date and time of path. This value is expressed in local time. </param>
            <param name="path">The file or directory for which to set the creation date and time information. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">creationTime specifies a value outside the range of dates or times permitted for this operation. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.Directory.SetCreationTimeUtc(System.String,System.DateTime)">
            <summary>Sets the creation date and time, in Coordinated Universal Time (UTC) format, for the specified file or directory.</summary>
            <param name="creationTimeUtc">A <see cref="T:System.DateTime"></see> containing the value to set for the creation date and time of path. This value is expressed in UTC time. </param>
            <param name="path">The file or directory for which to set the creation date and time information. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">creationTime specifies a value outside the range of dates or times permitted for this operation. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
            <filterpriority>2</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.Directory.SetCurrentDirectory(System.String)">
            <summary>Sets the application's current working directory to the specified directory.</summary>
            <param name="path">The path to which the current working directory is set. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.IO.IOException">An IO error occurred. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission to access unmanaged code. </exception>
            <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.Directory.SetLastAccessTime(System.String,System.DateTime)">
            <summary>Sets the date and time the specified file or directory was last accessed.</summary>
            <param name="lastAccessTime">A <see cref="T:System.DateTime"></see> containing the value to set for the access date and time of path. This value is expressed in local time. </param>
            <param name="path">The file or directory for which to set the access date and time information. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.Directory.SetLastAccessTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in Coordinated Universal Time (UTC) format, that the specified file or directory was last accessed.</summary>
            <param name="lastAccessTimeUtc">A <see cref="T:System.DateTime"></see> containing the value to set for the access date and time of path. This value is expressed in UTC time. </param>
            <param name="path">The file or directory for which to set the access date and time information. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.Directory.SetLastWriteTime(System.String,System.DateTime)">
            <summary>Sets the date and time a directory was last written to.</summary>
            <param name="lastWriteTime">The date and time the directory was last written to. This value is expressed in local time. </param>
            <param name="path">The path of the directory. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.Directory.SetLastWriteTimeUtc(System.String,System.DateTime)">
            <summary>Sets the date and time, in Coordinated Universal Time (UTC) format, that a directory was last written to.</summary>
            <param name="lastWriteTimeUtc">The date and time the directory was last written to. This value is expressed in UTC time. </param>
            <param name="path">The path of the directory. </param>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.FileNotFoundException">The specified path was not found. </exception>
            <filterpriority>2</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="T:Blackfin.Core.IO.DirectoryInfo">
            <summary>
            DirectoryInfo
            </summary>
        </member>
        <member name="T:Blackfin.Core.IO.IDirectoryInfo">
            <summary>Exposes instance methods for creating, moving, and enumerating through directories and subdirectories. This class cannot be inherited.</summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectoryInfo.Create">
            <summary>Creates a directory.</summary>
            <exception cref="T:System.IO.IOException">The directory cannot be created. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectoryInfo.Create(System.Security.AccessControl.DirectorySecurity)">
            <summary>Creates a directory using a <see cref="T:System.Security.AccessControl.DirectorySecurity"></see> object.</summary>
            <param name="directorySecurity">The access control to apply to the directory.</param>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
            <exception cref="T:System.NotSupportedException">Creating a directory with only the colon (:) character was attempted. </exception>
            <exception cref="T:System.IO.IOException">The directory specified by path is read-only or is not empty. </exception>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectoryInfo.CreateSubdirectory(System.String)">
            <summary>Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the <see cref="T:System.IO.DirectoryInfo"></see> class.</summary>
            <returns>The last directory specified in path.</returns>
            <param name="path">The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name. </param>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
            <exception cref="T:System.ArgumentException">path does not specify a valid file path or contains invalid DirectoryInfo characters. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.</exception>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.IO.IOException">The subdirectory cannot be created.-or- A file or directory already has the name specified by path. </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have code access permission to create the directory.-or-The caller does not have code access permission to read the directory described by the returned <see cref="T:System.IO.DirectoryInfo"></see> object.  This can occur when the path parameter describes an existing directory.</exception>
            <filterpriority>2</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectoryInfo.CreateSubdirectory(System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>Creates a subdirectory or subdirectories on the specified path with the specified security. The specified path can be relative to this instance of the <see cref="T:System.IO.DirectoryInfo"></see> class.</summary>
            <returns>The last directory specified in path.</returns>
            <param name="directorySecurity">The security to apply.</param>
            <param name="path">The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name.</param>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
            <exception cref="T:System.ArgumentException">path does not specify a valid file path or contains invalid DirectoryInfo characters. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.</exception>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.IO.IOException">The subdirectory cannot be created.-or- A file or directory already has the name specified by path. </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have code access permission to create the directory.-or-The caller does not have code access permission to read the directory described by the returned <see cref="T:System.IO.DirectoryInfo"></see> object.  This can occur when the path parameter describes an existing directory.</exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectoryInfo.Delete">
            <summary>Deletes this <see cref="T:System.IO.DirectoryInfo"></see> if it is empty.</summary>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.IOException">The directory is not empty. -or-The directory is the application's current working directory.</exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectoryInfo.Delete(System.Boolean)">
            <summary>Deletes this instance of a <see cref="T:System.IO.DirectoryInfo"></see>, specifying whether to delete subdirectories and files.</summary>
            <param name="recursive">true to delete this directory, its subdirectories, and all files; otherwise, false. </param>
            <exception cref="T:System.IO.IOException">The directory is read-only.-or- The directory contains one or more files or subdirectories and recursive is false.-or-The directory is the application's current working directory. </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectoryInfo.GetAccessControl">
            <summary>Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"></see> object that encapsulates the access control list (ACL) entries for the directory described by the current <see cref="T:System.IO.DirectoryInfo"></see> object.</summary>
            <returns>A <see cref="T:System.Security.AccessControl.DirectorySecurity"></see> object that encapsulates the access control rules for the directory.</returns>
            <exception cref="T:System.SystemException">The directory could not be found or modified.</exception>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows 2000 or later.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the directory.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The directory is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The current process does not have access to open the directory.</exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectoryInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)">
            <summary>Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"></see> object that encapsulates the specified type of access control list (ACL) entries for the directory described by the current <see cref="T:System.IO.DirectoryInfo"></see> object.</summary>
            <returns>A <see cref="T:System.Security.AccessControl.DirectorySecurity"></see> object that encapsulates the access control rules for the file described by the path parameter.ExceptionsException typeCondition<see cref="T:System.SystemException"></see>The directory could not be found or modified.<see cref="T:System.UnauthorizedAccessException"></see>The current process does not have access to open the directory.<see cref="T:System.IO.IOException"></see>An I/O error occurred while opening the directory.<see cref="T:System.PlatformNotSupportedException"></see>The current operating system is not Microsoft Windows 2000 or later.<see cref="T:System.UnauthorizedAccessException"></see>The directory is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.</returns>
            <param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections"></see> values that specifies the type of access control list (ACL) information to receive.</param>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectoryInfo.GetDirectories">
            <summary>Returns the subdirectories of the current directory.</summary>
            <returns>An array of <see cref="T:System.IO.DirectoryInfo"></see> objects.</returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the DirectoryInfo object is invalid, such as being on an unmapped drive. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectoryInfo.GetDirectories(System.String)">
            <summary>Returns an array of directories in the current <see cref="T:System.IO.DirectoryInfo"></see> matching the given search criteria.</summary>
            <returns>An array of type DirectoryInfo matching searchPattern.</returns>
            <param name="searchPattern">The search string, such as "System*", used to search for all directories beginning with the word "System". </param>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the DirectoryInfo object is invalid, such as being on an unmapped drive. </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
            <exception cref="T:System.ArgumentNullException">searchPattern is null. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)">
            <summary>Returns an array of directories in the current <see cref="T:System.IO.DirectoryInfo"></see> matching the given search criteria and using a value to determine whether to search subdirectories.</summary>
            <returns>An array of type DirectoryInfo matching searchPattern.</returns>
            <param name="searchOption">One of the values of the <see cref="T:System.IO.SearchOption"></see> enumeration that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="searchPattern">The search string, such as "System*", used to search for all directories beginning with the word "System".</param>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the DirectoryInfo object is invalid, such as being on an unmapped drive. </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
            <exception cref="T:System.ArgumentNullException">searchPattern is null. </exception>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectoryInfo.GetFiles">
            <summary>Returns a file list from the current directory.</summary>
            <returns>An array of type <see cref="T:System.IO.FileInfo"></see>.</returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path is invalid, such as being on an unmapped drive. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectoryInfo.GetFiles(System.String)">
            <summary>Returns a file list from the current directory matching the given searchPattern.</summary>
            <returns>An array of type <see cref="T:System.IO.FileInfo"></see>.</returns>
            <param name="searchPattern">The search string, such as "*.txt". </param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
            <exception cref="T:System.ArgumentNullException">searchPattern is null. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path is invalid, such as being on an unmapped drive. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectoryInfo.GetFiles(System.String,System.IO.SearchOption)">
            <summary>Returns a file list from the current directory matching the given searchPattern and using a value to determine whether to search subdirectories.</summary>
            <returns>An array of type <see cref="T:System.IO.FileInfo"></see>.</returns>
            <param name="searchOption">One of the values of the <see cref="T:System.IO.SearchOption"></see> enumeration that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="searchPattern">The search string, such as "System*", used to search for all directories beginning with the word "System".</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
            <exception cref="T:System.ArgumentNullException">searchPattern is null. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path is invalid, such as being on an unmapped drive. </exception>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectoryInfo.GetFileSystemInfos">
            <summary>Returns an array of strongly typed <see cref="T:System.IO.FileSystemInfo"></see> entries representing all the files and subdirectories in a directory.</summary>
            <returns>An array of strongly typed <see cref="T:System.IO.FileSystemInfo"></see> entries.</returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path is invalid, such as being on an unmapped drive. </exception>
            <filterpriority>2</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectoryInfo.GetFileSystemInfos(System.String)">
            <summary>Retrieves an array of strongly typed <see cref="T:System.IO.FileSystemInfo"></see> objects representing the files and subdirectories matching the specified search criteria.</summary>
            <returns>An array of strongly typed FileSystemInfo objects matching the search criteria.</returns>
            <param name="searchPattern">The search string, such as "System*", used to search for all directories beginning with the word "System". </param>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
            <exception cref="T:System.ArgumentNullException">searchPattern is null. </exception>
            <filterpriority>2</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectoryInfo.MoveTo(System.String)">
            <summary>Moves a <see cref="T:System.IO.DirectoryInfo"></see> instance and its contents to a new path.</summary>
            <param name="destDirName">The name and path to which to move this directory. The destination cannot be another disk volume or a directory with the identical name. It can be an existing directory to which you want to add this directory as a subdirectory. </param>
            <exception cref="T:System.ArgumentNullException">destDirName is null.-or- The directory being moved and the destination directory have the same name. </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.IOException">An attempt was made to move a directory to a different volume, or destDirName already exists. </exception>
            <exception cref="T:System.ArgumentException">destDirName is an empty string (''"). </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectoryInfo.SetAccessControl(System.Security.AccessControl.DirectorySecurity)">
            <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.DirectorySecurity"></see> object to the directory described by the current <see cref="T:System.IO.DirectoryInfo"></see> object.</summary>
            <param name="directorySecurity">A <see cref="T:System.Security.AccessControl.DirectorySecurity"></see> object that describes an ACL entry to apply to the directory described by the path parameter.</param>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows 2000 or later.</exception>
            <exception cref="T:System.SystemException">The file could not be found or modified.</exception>
            <exception cref="T:System.ArgumentNullException">The directorySecurity parameter is null.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The current process does not have access to open the file.</exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IDirectoryInfo.ToString">
            <summary>Returns the original path that was passed by the user.</summary>
            <returns>Returns the original path that was passed by the user.</returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Blackfin.Core.IO.IDirectoryInfo.Exists">
            <summary>Gets a value indicating whether the directory exists.</summary>
            <returns>true if the directory exists; otherwise, false.</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Blackfin.Core.IO.IDirectoryInfo.Name">
            <summary>Gets the name of this <see cref="T:System.IO.DirectoryInfo"></see> instance.</summary>
            <returns>The directory name.</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Blackfin.Core.IO.IDirectoryInfo.Parent">
            <summary>Gets the parent directory of a specified subdirectory.</summary>
            <returns>The parent directory, or null if the path is null or if the file path denotes a root (such as "\", "C:", or * "\\server\share").</returns>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="P:Blackfin.Core.IO.IDirectoryInfo.Root">
            <summary>Gets the root portion of a path.</summary>
            <returns>A <see cref="T:System.IO.DirectoryInfo"></see> object representing the root of a path.</returns>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.DirectoryInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Blackfin.Core.IO.DirectoryInfo"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Blackfin.Core.IO.DirectoryInfo.#ctor(System.IO.DirectoryInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Blackfin.Core.IO.DirectoryInfo"/> class.
            </summary>
            <param name="di">The di.</param>
        </member>
        <member name="M:Blackfin.Core.IO.DirectoryInfo.Create">
            <summary>Creates a directory.</summary>
            <exception cref="T:System.IO.IOException">The directory cannot be created. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.DirectoryInfo.Create(System.Security.AccessControl.DirectorySecurity)">
            <summary>Creates a directory using a <see cref="T:System.Security.AccessControl.DirectorySecurity"></see> object.</summary>
            <param name="directorySecurity">The access control to apply to the directory.</param>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
            <exception cref="T:System.NotSupportedException">Creating a directory with only the colon (:) character was attempted. </exception>
            <exception cref="T:System.IO.IOException">The directory specified by path is read-only or is not empty. </exception>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The caller does not have the required permission. </exception>
            <exception cref="T:System.ArgumentException">path is a zero-length string, contains only white space, or contains one or more invalid characters as defined by System.IO.Path.InvalidPathChars. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.DirectoryInfo.CreateSubdirectory(System.String)">
            <summary>Creates a subdirectory or subdirectories on the specified path. The specified path can be relative to this instance of the <see cref="T:System.IO.DirectoryInfo"></see> class.</summary>
            <returns>The last directory specified in path.</returns>
            <param name="path">The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name. </param>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
            <exception cref="T:System.ArgumentException">path does not specify a valid file path or contains invalid DirectoryInfo characters. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.</exception>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.IO.IOException">The subdirectory cannot be created.-or- A file or directory already has the name specified by path. </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have code access permission to create the directory.-or-The caller does not have code access permission to read the directory described by the returned <see cref="T:System.IO.DirectoryInfo"></see> object.  This can occur when the path parameter describes an existing directory.</exception>
            <filterpriority>2</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.DirectoryInfo.CreateSubdirectory(System.String,System.Security.AccessControl.DirectorySecurity)">
            <summary>Creates a subdirectory or subdirectories on the specified path with the specified security. The specified path can be relative to this instance of the <see cref="T:System.IO.DirectoryInfo"></see> class.</summary>
            <returns>The last directory specified in path.</returns>
            <param name="directorySecurity">The security to apply.</param>
            <param name="path">The specified path. This cannot be a different disk volume or Universal Naming Convention (UNC) name.</param>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
            <exception cref="T:System.ArgumentException">path does not specify a valid file path or contains invalid DirectoryInfo characters. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. The specified path, file name, or both are too long.</exception>
            <exception cref="T:System.ArgumentNullException">path is null. </exception>
            <exception cref="T:System.IO.IOException">The subdirectory cannot be created.-or- A file or directory already has the name specified by path. </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have code access permission to create the directory.-or-The caller does not have code access permission to read the directory described by the returned <see cref="T:System.IO.DirectoryInfo"></see> object.  This can occur when the path parameter describes an existing directory.</exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.DirectoryInfo.Delete">
            <summary>Deletes this <see cref="T:System.IO.DirectoryInfo"></see> if it is empty.</summary>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.IOException">The directory is not empty. -or-The directory is the application's current working directory.</exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.DirectoryInfo.Delete(System.Boolean)">
            <summary>Deletes this instance of a <see cref="T:System.IO.DirectoryInfo"></see>, specifying whether to delete subdirectories and files.</summary>
            <param name="recursive">true to delete this directory, its subdirectories, and all files; otherwise, false. </param>
            <exception cref="T:System.IO.IOException">The directory is read-only.-or- The directory contains one or more files or subdirectories and recursive is false.-or-The directory is the application's current working directory. </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.DirectoryInfo.GetAccessControl">
            <summary>Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"></see> object that encapsulates the access control list (ACL) entries for the directory described by the current <see cref="T:System.IO.DirectoryInfo"></see> object.</summary>
            <returns>A <see cref="T:System.Security.AccessControl.DirectorySecurity"></see> object that encapsulates the access control rules for the directory.</returns>
            <exception cref="T:System.SystemException">The directory could not be found or modified.</exception>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows 2000 or later.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the directory.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The directory is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The current process does not have access to open the directory.</exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.DirectoryInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)">
            <summary>Gets a <see cref="T:System.Security.AccessControl.DirectorySecurity"></see> object that encapsulates the specified type of access control list (ACL) entries for the directory described by the current <see cref="T:System.IO.DirectoryInfo"></see> object.</summary>
            <returns>A <see cref="T:System.Security.AccessControl.DirectorySecurity"></see> object that encapsulates the access control rules for the file described by the path parameter.ExceptionsException typeCondition<see cref="T:System.SystemException"></see>The directory could not be found or modified.<see cref="T:System.UnauthorizedAccessException"></see>The current process does not have access to open the directory.<see cref="T:System.IO.IOException"></see>An I/O error occurred while opening the directory.<see cref="T:System.PlatformNotSupportedException"></see>The current operating system is not Microsoft Windows 2000 or later.<see cref="T:System.UnauthorizedAccessException"></see>The directory is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.</returns>
            <param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections"></see> values that specifies the type of access control list (ACL) information to receive.</param>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.DirectoryInfo.GetDirectories">
            <summary>Returns the subdirectories of the current directory.</summary>
            <returns>An array of <see cref="T:System.IO.DirectoryInfo"></see> objects.</returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the DirectoryInfo object is invalid, such as being on an unmapped drive. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.DirectoryInfo.GetDirectories(System.String)">
            <summary>Returns an array of directories in the current <see cref="T:System.IO.DirectoryInfo"></see> matching the given search criteria.</summary>
            <returns>An array of type DirectoryInfo matching searchPattern.</returns>
            <param name="searchPattern">The search string, such as "System*", used to search for all directories beginning with the word "System". </param>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the DirectoryInfo object is invalid, such as being on an unmapped drive. </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
            <exception cref="T:System.ArgumentNullException">searchPattern is null. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.DirectoryInfo.GetDirectories(System.String,System.IO.SearchOption)">
            <summary>Returns an array of directories in the current <see cref="T:System.IO.DirectoryInfo"></see> matching the given search criteria and using a value to determine whether to search subdirectories.</summary>
            <returns>An array of type DirectoryInfo matching searchPattern.</returns>
            <param name="searchOption">One of the values of the <see cref="T:System.IO.SearchOption"></see> enumeration that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="searchPattern">The search string, such as "System*", used to search for all directories beginning with the word "System".</param>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path encapsulated in the DirectoryInfo object is invalid, such as being on an unmapped drive. </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
            <exception cref="T:System.ArgumentNullException">searchPattern is null. </exception>
        </member>
        <member name="M:Blackfin.Core.IO.DirectoryInfo.GetFiles">
            <summary>Returns a file list from the current directory.</summary>
            <returns>An array of type <see cref="T:System.IO.FileInfo"></see>.</returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path is invalid, such as being on an unmapped drive. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.DirectoryInfo.GetFiles(System.String)">
            <summary>Returns a file list from the current directory matching the given searchPattern.</summary>
            <returns>An array of type <see cref="T:System.IO.FileInfo"></see>.</returns>
            <param name="searchPattern">The search string, such as "*.txt". </param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
            <exception cref="T:System.ArgumentNullException">searchPattern is null. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path is invalid, such as being on an unmapped drive. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.DirectoryInfo.GetFiles(System.String,System.IO.SearchOption)">
            <summary>Returns a file list from the current directory matching the given searchPattern and using a value to determine whether to search subdirectories.</summary>
            <returns>An array of type <see cref="T:System.IO.FileInfo"></see>.</returns>
            <param name="searchOption">One of the values of the <see cref="T:System.IO.SearchOption"></see> enumeration that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
            <param name="searchPattern">The search string, such as "System*", used to search for all directories beginning with the word "System".</param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
            <exception cref="T:System.ArgumentNullException">searchPattern is null. </exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path is invalid, such as being on an unmapped drive. </exception>
        </member>
        <member name="M:Blackfin.Core.IO.DirectoryInfo.GetFileSystemInfos">
            <summary>Returns an array of strongly typed <see cref="T:System.IO.FileSystemInfo"></see> entries representing all the files and subdirectories in a directory.</summary>
            <returns>An array of strongly typed <see cref="T:System.IO.FileSystemInfo"></see> entries.</returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">The path is invalid, such as being on an unmapped drive. </exception>
            <filterpriority>2</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.DirectoryInfo.GetFileSystemInfos(System.String)">
            <summary>Retrieves an array of strongly typed <see cref="T:System.IO.FileSystemInfo"></see> objects representing the files and subdirectories matching the specified search criteria.</summary>
            <returns>An array of strongly typed FileSystemInfo objects matching the search criteria.</returns>
            <param name="searchPattern">The search string, such as "System*", used to search for all directories beginning with the word "System". </param>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
            <exception cref="T:System.ArgumentNullException">searchPattern is null. </exception>
            <filterpriority>2</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.DirectoryInfo.MoveTo(System.String)">
            <summary>Moves a <see cref="T:System.IO.DirectoryInfo"></see> instance and its contents to a new path.</summary>
            <param name="destDirName">The name and path to which to move this directory. The destination cannot be another disk volume or a directory with the identical name. It can be an existing directory to which you want to add this directory as a subdirectory. </param>
            <exception cref="T:System.ArgumentNullException">destDirName is null.-or- The directory being moved and the destination directory have the same name. </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.IOException">An attempt was made to move a directory to a different volume, or destDirName already exists. </exception>
            <exception cref="T:System.ArgumentException">destDirName is an empty string (''"). </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.DirectoryInfo.SetAccessControl(System.Security.AccessControl.DirectorySecurity)">
            <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.DirectorySecurity"></see> object to the directory described by the current <see cref="T:System.IO.DirectoryInfo"></see> object.</summary>
            <param name="directorySecurity">A <see cref="T:System.Security.AccessControl.DirectorySecurity"></see> object that describes an ACL entry to apply to the directory described by the path parameter.</param>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows 2000 or later.</exception>
            <exception cref="T:System.SystemException">The file could not be found or modified.</exception>
            <exception cref="T:System.ArgumentNullException">The directorySecurity parameter is null.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The current process does not have access to open the file.</exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="P:Blackfin.Core.IO.DirectoryInfo.Exists">
            <summary>Gets a value indicating whether the directory exists.</summary>
            <returns>true if the directory exists; otherwise, false.</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Blackfin.Core.IO.DirectoryInfo.Name">
            <summary>Gets the name of this <see cref="T:System.IO.DirectoryInfo"></see> instance.</summary>
            <returns>The directory name.</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Blackfin.Core.IO.DirectoryInfo.Parent">
            <summary>Gets the parent directory of a specified subdirectory.</summary>
            <returns>The parent directory, or null if the path is null or if the file path denotes a root (such as "\", "C:", or * "\\server\share").</returns>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="P:Blackfin.Core.IO.DirectoryInfo.Root">
            <summary>Gets the root portion of a path.</summary>
            <returns>A <see cref="T:System.IO.DirectoryInfo"></see> object representing the root of a path.</returns>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="T:Blackfin.Core.IO.IFileInfo">
            <summary>Provides instance methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of <see cref="T:System.IO.FileStream"></see> objects. This class cannot be inherited.</summary>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Blackfin.Core.IO.IFileInfo.AppendText">
            <summary>Creates a <see cref="T:System.IO.StreamWriter"></see> that appends text to the file represented by this instance of the <see cref="T:System.IO.FileInfo"></see>.</summary>
            <returns>A new StreamWriter.</returns>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IFileInfo.CopyTo(System.String)">
            <summary>Copies an existing file to a new file, disallowing the overwriting of an existing file.</summary>
            <returns>A new file with a fully qualified path.</returns>
            <param name="destFileName">The name of the new file to copy to. </param>
            <exception cref="T:System.ArgumentException">destFileName is empty, contains only white spaces, or contains invalid characters. </exception>
            <exception cref="T:System.IO.IOException">An error occurs, or the destination file already exists. </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
            <exception cref="T:System.ArgumentNullException">destFileName is null. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
            <exception cref="T:System.NotSupportedException">destFileName contains a colon (:) in the middle of the string. </exception>
            <exception cref="T:System.UnauthorizedAccessException">A directory path is passed in, or the file is being moved to a different drive. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IFileInfo.CopyTo(System.String,System.Boolean)">
            <summary>Copies an existing file to a new file, allowing the overwriting of an existing file.</summary>
            <returns>A new file, or an overwrite of an existing file if overwrite is true. If the file exists and overwrite is false, an <see cref="T:System.IO.IOException"></see> is thrown.</returns>
            <param name="destFileName">The name of the new file to copy to. </param>
            <param name="overwrite">true to allow an existing file to be overwritten; otherwise, false. </param>
            <exception cref="T:System.ArgumentException">destFileName is empty, contains only white spaces, or contains invalid characters. </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
            <exception cref="T:System.ArgumentNullException">destFileName is null. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
            <exception cref="T:System.IO.IOException">An error occurs, or the destination file already exists and overwrite is false. </exception>
            <exception cref="T:System.NotSupportedException">destFileName contains a colon (:) in the middle of the string. </exception>
            <exception cref="T:System.UnauthorizedAccessException">A directory path is passed in, or the file is being moved to a different drive. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IFileInfo.Create">
            <summary>Creates a file.</summary>
            <returns>A new file.</returns>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IFileInfo.CreateText">
            <summary>Creates a <see cref="T:System.IO.StreamWriter"></see> that writes a new text file.</summary>
            <returns>A new StreamWriter.</returns>
            <exception cref="T:System.IO.IOException">The disk is read-only. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The file name is a directory. </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IFileInfo.Decrypt">
            <summary>Decrypts a file that was encrypted by the current account using the <see cref="M:System.IO.FileInfo.Encrypt"></see> method.</summary>
            <exception cref="T:System.UnauthorizedAccessException">The file described by the current <see cref="T:System.IO.FileInfo"></see> object is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified. </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo"></see> object could not be found.</exception>
            <exception cref="T:System.NotSupportedException">The file system is not NTFS.</exception>
            <filterpriority>2</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IFileInfo.Delete">
            <summary>Permanently deletes a file.</summary>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
            <exception cref="T:System.IO.IOException">The target file is open or memory-mapped on a computer running Microsoft Windows NT. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The path is a directory. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IFileInfo.Encrypt">
            <summary>Encrypts a file so that only the account used to encrypt the file can decrypt it.</summary>
            <exception cref="T:System.UnauthorizedAccessException">The file described by the current <see cref="T:System.IO.FileInfo"></see> object is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.IO.DriveNotFoundException">An invalid drive was specified. </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo"></see> object could not be found.</exception>
            <exception cref="T:System.NotSupportedException">The file system is not NTFS.</exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IFileInfo.GetAccessControl">
            <summary>Gets a <see cref="T:System.Security.AccessControl.FileSecurity"></see> object that encapsulates the access control list (ACL) entries for the file described by the current <see cref="T:System.IO.FileInfo"></see> object.</summary>
            <returns>A <see cref="T:System.Security.AccessControl.FileSecurity"></see> object that encapsulates the access control rules for the current file.</returns>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows 2000 or later.</exception>
            <exception cref="T:System.Security.AccessControl.PrivilegeNotHeldException">The current system account does not have administrative privileges.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.SystemException">The file could not be found.</exception>
            <exception cref="T:System.UnauthorizedAccessException">This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IFileInfo.GetAccessControl(System.Security.AccessControl.AccessControlSections)">
            <summary>Gets a <see cref="T:System.Security.AccessControl.FileSecurity"></see> object that encapsulates the specified type of access control list (ACL) entries for the file described by the current <see cref="T:System.IO.FileInfo"></see> object.</summary>
            <returns>A <see cref="T:System.Security.AccessControl.FileSecurity"></see> object that encapsulates the access control rules for the current file.     </returns>
            <param name="includeSections">One of the <see cref="T:System.Security.AccessControl.AccessControlSections"></see> values that specifies which group of access control entries to retrieve. </param>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows 2000 or later.</exception>
            <exception cref="T:System.Security.AccessControl.PrivilegeNotHeldException">The current system account does not have administrative privileges.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.SystemException">The file could not be found.</exception>
            <exception cref="T:System.UnauthorizedAccessException">This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IFileInfo.MoveTo(System.String)">
            <summary>Moves a specified file to a new location, providing the option to specify a new file name.</summary>
            <param name="destFileName">The path to move the file to, which can specify a different file name. </param>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
            <exception cref="T:System.ArgumentException">destFileName is empty, contains only white spaces, or contains invalid characters. </exception>
            <exception cref="T:System.UnauthorizedAccessException">destFileName is read-only or is a directory. </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file is not found. </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
            <exception cref="T:System.ArgumentNullException">destFileName is null. </exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
            <exception cref="T:System.NotSupportedException">destFileName contains a colon (:) in the middle of the string. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs, such as the destination file already exists or the destination device is not ready. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IFileInfo.Open(System.IO.FileMode)">
            <summary>Opens a file in the specified mode.</summary>
            <returns>A file opened in the specified mode, with read/write access and unshared.</returns>
            <param name="mode">A <see cref="T:System.IO.FileMode"></see> constant specifying the mode (for example, Open or Append) in which to open the file. </param>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
            <exception cref="T:System.UnauthorizedAccessException">The file is read-only or is a directory. </exception>
            <exception cref="T:System.IO.IOException">The file is already open. </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file is not found. </exception>
            <filterpriority>2</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IFileInfo.Open(System.IO.FileMode,System.IO.FileAccess)">
            <summary>Opens a file in the specified mode with read, write, or read/write access.</summary>
            <returns>A <see cref="T:System.IO.FileStream"></see> object opened in the specified mode and access, and unshared.</returns>
            <param name="mode">A <see cref="T:System.IO.FileMode"></see> constant specifying the mode (for example, Open or Append) in which to open the file. </param>
            <param name="access">A <see cref="T:System.IO.FileAccess"></see> constant specifying whether to open the file with Read, Write, or ReadWrite file access. </param>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
            <exception cref="T:System.ArgumentNullException">One or more arguments is null. </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
            <exception cref="T:System.ArgumentException">path is empty or contains only white spaces. </exception>
            <exception cref="T:System.IO.IOException">The file is already open. </exception>
            <exception cref="T:System.UnauthorizedAccessException">path is read-only or is a directory. </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file is not found. </exception>
            <filterpriority>2</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IFileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.</summary>
            <returns>A <see cref="T:System.IO.FileStream"></see> object opened with the specified mode, access, and sharing options.</returns>
            <param name="share">A <see cref="T:System.IO.FileShare"></see> constant specifying the type of access other FileStream objects have to this file. </param>
            <param name="mode">A <see cref="T:System.IO.FileMode"></see> constant specifying the mode (for example, Open or Append) in which to open the file. </param>
            <param name="access">A <see cref="T:System.IO.FileAccess"></see> constant specifying whether to open the file with Read, Write, or ReadWrite file access. </param>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
            <exception cref="T:System.ArgumentNullException">One or more arguments is null. </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
            <exception cref="T:System.ArgumentException">path is empty or contains only white spaces. </exception>
            <exception cref="T:System.IO.IOException">The file is already open. </exception>
            <exception cref="T:System.UnauthorizedAccessException">path is read-only or is a directory. </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file is not found. </exception>
            <filterpriority>2</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IFileInfo.OpenRead">
            <summary>Creates a read-only <see cref="T:System.IO.FileStream"></see>.</summary>
            <returns>A new read-only <see cref="T:System.IO.FileStream"></see> object.</returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
            <exception cref="T:System.IO.IOException">The file is already open. </exception>
            <exception cref="T:System.UnauthorizedAccessException">path is read-only or is a directory. </exception>
            <filterpriority>2</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IFileInfo.OpenText">
            <summary>Creates a <see cref="T:System.IO.StreamReader"></see> with UTF8 encoding that reads from an existing text file.</summary>
            <returns>A new StreamReader with UTF8 encoding.</returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
            <exception cref="T:System.UnauthorizedAccessException">path is read-only or is a directory. </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file is not found. </exception>
            <filterpriority>2</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IFileInfo.OpenWrite">
            <summary>Creates a write-only <see cref="T:System.IO.FileStream"></see>.</summary>
            <returns>A new write-only unshared <see cref="T:System.IO.FileStream"></see> object.</returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
            <exception cref="T:System.UnauthorizedAccessException">path is read-only or is a directory. </exception>
            <filterpriority>2</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IFileInfo.Replace(System.String,System.String)">
            <summary>Replaces the contents of a specified file with the file described by the current <see cref="T:System.IO.FileInfo"></see> object, deleting the original file, and creating a backup of the replaced file.</summary>
            <returns>A <see cref="T:System.IO.FileInfo"></see> object that encapsulates information about the file described by the destFileName parameter.</returns>
            <param name="destinationFileName">The name of a file to replace with the current file.</param>
            <param name="destinationBackupFileName">The name of a file with which to create a backup of the file described by the destFileName parameter.</param>
            <exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo"></see> object could not be found.-or-The file described by the destBackupFileName parameter could not be found.</exception>
            <exception cref="T:System.ArgumentNullException">The destFileName parameter is null.</exception>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
            <exception cref="T:System.ArgumentException">The path described by the destFileName parameter was not of a legal form.-or-The path described by the destBackupFileName parameter was not of a legal form.</exception>
            <filterpriority>2</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IFileInfo.Replace(System.String,System.String,System.Boolean)">
            <summary>Replaces the contents of a specified file with the file described by the current <see cref="T:System.IO.FileInfo"></see> object, deleting the original file, and creating a backup of the replaced file.  Also specifies whether to ignore merge errors. </summary>
            <returns>A <see cref="T:System.IO.FileInfo"></see> object that encapsulates information about the file described by the destFileName parameter.</returns>
            <param name="destinationFileName">The name of a file to replace with the current file.</param>
            <param name="ignoreMetadataErrors">true to ignore merge errors (such as attributes and ACLs) from the replaced file to the replacement file; otherwise false. </param>
            <param name="destinationBackupFileName">The name of a file with which to create a backup of the file described by the destFileName parameter.</param>
            <exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo"></see> object could not be found.-or-The file described by the destBackupFileName parameter could not be found.</exception>
            <exception cref="T:System.ArgumentNullException">The destFileName parameter is null.</exception>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows NT or later.</exception>
            <exception cref="T:System.ArgumentException">The path described by the destFileName parameter was not of a legal form.-or-The path described by the destBackupFileName parameter was not of a legal form.</exception>
            <filterpriority>2</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="M:Blackfin.Core.IO.IFileInfo.SetAccessControl(System.Security.AccessControl.FileSecurity)">
            <summary>Applies access control list (ACL) entries described by a <see cref="T:System.Security.AccessControl.FileSecurity"></see> object to the file described by the current <see cref="T:System.IO.FileInfo"></see> object.</summary>
            <param name="fileSecurity">A <see cref="T:System.Security.AccessControl.FileSecurity"></see> object that describes an access control list (ACL) entry to apply to the current file.</param>
            <exception cref="T:System.PlatformNotSupportedException">The current operating system is not Microsoft Windows 2000 or later.</exception>
            <exception cref="T:System.SystemException">The file could not be found or modified.</exception>
            <exception cref="T:System.ArgumentNullException">The fileSecurity parameter is null.</exception>
            <exception cref="T:System.UnauthorizedAccessException">The current process does not have access to open the file.</exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="P:Blackfin.Core.IO.IFileInfo.Directory">
            <summary>Gets an instance of the parent directory.</summary>
            <returns>A <see cref="T:System.IO.DirectoryInfo"></see> object representing the parent directory of this file.</returns>
            <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid, such as being on an unmapped drive. </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="P:Blackfin.Core.IO.IFileInfo.DirectoryName">
            <summary>Gets a string representing the directory's full path.</summary>
            <returns>A string representing the directory's full path.</returns>
            <exception cref="T:System.ArgumentNullException">null was passed in for the directory name. </exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
            <filterpriority>1</filterpriority>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Unrestricted="true" /></PermissionSet>
        </member>
        <member name="P:Blackfin.Core.IO.IFileInfo.Exists">
            <summary>Gets a value indicating whether a file exists.</summary>
            <returns>true if the file exists; false if the file does not exist or if the file is a directory.</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Blackfin.Core.IO.IFileInfo.IsReadOnly">
            <summary>Gets or sets a value that determines if the current file is read only.</summary>
            <returns>true if the current file is read only; otherwise, false.</returns>
            <exception cref="T:System.UnauthorizedAccessException">The file described by the current <see cref="T:System.IO.FileInfo"></see> object is read-only.-or- This operation is not supported on the current platform.-or- The caller does not have the required permission.</exception>
            <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file described by the current <see cref="T:System.IO.FileInfo"></see> object could not be found.</exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Blackfin.Core.IO.IFileInfo.Length">
            <summary>Gets the size of the current file.</summary>
            <returns>The size of the current file.</returns>
            <exception cref="T:System.IO.IOException"><see cref="M:System.IO.FileSystemInfo.Refresh"></see> cannot update the state of the file or directory. </exception>
            <exception cref="T:System.IO.FileNotFoundException">The file does not exist.-or- The Length property is called for a directory. </exception>
            <filterpriority>1</filterpriority>
        </member>
        <member name="P:Blackfin.Core.IO.IFileInfo.Name">
            <summary>Gets the name of the file.</summary>
            <returns>The name of the file.</returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="T:Blackfin.Core.IO.Web.ApplicationRootDirectory">
            <summary>
            Provides information on the root directory of this application.
            </summary>
            <remarks>
            This is a helper class for giving access to the "~" shorthand notation.
            This base implementation does not assume that the caller is running 
            in the context of the web application.
            </remarks>
        </member>
        <member name="T:Blackfin.Core.IO.Web.IWebApplicationRootDirectory">
            <summary>
            Provides access to information about this applications root directory.
            </summary>
        </member>
        <member name="M:Blackfin.Core.IO.Web.IWebApplicationRootDirectory.ConvertToVirtualPath(System.String)">
            <summary>
            Fixes the path - turns the base ApplicationPath into "~"
            </summary>
            <param name="physicalPath">The physical path.</param>
            <returns>the virtual path</returns>
        </member>
        <member name="M:Blackfin.Core.IO.Web.IWebApplicationRootDirectory.MapPath(System.String)">
            <summary>
            Maps the path to a physical directory.
            </summary>
            <param name="virtualPath">The virtual path.</param>
            <returns></returns>
        </member>
        <member name="P:Blackfin.Core.IO.Web.IWebApplicationRootDirectory.PhysicalApplicationRoot">
            <summary>
            Gets the physical application root directory.
            </summary>
            <value>The physical application root.</value>
        </member>
        <member name="P:Blackfin.Core.IO.Web.IWebApplicationRootDirectory.RootDirectoryInfo">
            <summary>
            Gets the root directory info.
            </summary>
            <value>The root directory info.</value>
        </member>
        <member name="M:Blackfin.Core.IO.Web.ApplicationRootDirectory.ConvertToVirtualPath(System.String)">
            <summary>
            Fixes the path - turns the base ApplicationPath into "~"
            </summary>
            <param name="physicalPath">The physical path.</param>
            <returns></returns>
        </member>
        <member name="P:Blackfin.Core.IO.Web.ApplicationRootDirectory.PhysicalApplicationRoot">
            <summary>
            Gets the physical application root directory.
            </summary>
            <value>The physical application root.</value>
        </member>
        <member name="P:Blackfin.Core.IO.Web.ApplicationRootDirectory.RootDirectoryInfo">
            <summary>
            Gets the root directory info.
            </summary>
            <value>The root directory info.</value>
        </member>
        <member name="T:Blackfin.Core.IO.Web.WebApplicationRootDirectory">
            <summary>
            Provides information on the root directory of this web application.
            </summary>
            <remarks>
            This is a helper class for giving access to the "~" shorthand notation.
            This class assumes that the caller is running in the context of the
            web application - tests and other classes should use a different 
            implementation.
            </remarks>
        </member>
        <member name="T:Blackfin.Core.Logging.DebuggerWriter">
            <summary>
            Implements a <see cref="T:System.IO.TextWriter"/> for writing information to the debugger log.
            </summary>
            <remarks>From: http://www.u2u.info/Blogs/Kris/Lists/Posts/Post.aspx?ID=11</remarks>
            <seealso cref="M:System.Diagnostics.Debugger.Log(System.Int32,System.String,System.String)"/>
        </member>
        <member name="M:Blackfin.Core.Logging.DebuggerWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Blackfin.Core.Logging.DebuggerWriter"/> class.
            </summary>
        </member>
        <member name="M:Blackfin.Core.Logging.DebuggerWriter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Blackfin.Core.Logging.DebuggerWriter"/> class with the specified level and category.
            </summary>
            <param name="category">The category of the messages.</param>
        </member>
        <member name="M:Blackfin.Core.Logging.DebuggerWriter.#ctor(System.String,System.IFormatProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Blackfin.Core.Logging.DebuggerWriter"/> class with the specified level, category and format provider.
            </summary>
            <param name="category">The category of the messages.</param>
            <param name="formatProvider">An <see cref="T:System.IFormatProvider"/> object that controls formatting.</param>
        </member>
        <member name="M:Blackfin.Core.Logging.DebuggerWriter.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.TextWriter"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Blackfin.Core.Logging.DebuggerWriter.Write(System.Char)">
            <summary>
            Writes a character to the text stream.
            </summary>
            <param name="value">The character to write to the text stream.</param>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:Blackfin.Core.Logging.DebuggerWriter.Write(System.String)">
            <summary>
            Writes a string to the text stream.
            </summary>
            <param name="value">The string to write.</param>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:Blackfin.Core.Logging.DebuggerWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a subarray of characters to the text stream.
            </summary>
            <param name="buffer">The character array to write data from.</param>
            <param name="index">Starting index in the buffer.</param>
            <param name="count">The number of characters to write.</param>
            <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index"/> is less than <paramref name="count"/>. </exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="buffer"/> parameter is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> or <paramref name="count"/> is negative. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:Blackfin.Core.Logging.DebuggerWriter.InternalWrite(System.String)">
            <summary>
            Internals the write.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:Blackfin.Core.Logging.DebuggerWriter.Encoding">
            <summary>
            When overridden in a derived class, returns the <see cref="T:System.Text.Encoding"/> in which the output is written.
            </summary>
            <value></value>
            <returns>The Encoding in which the output is written.</returns>
        </member>
        <member name="P:Blackfin.Core.Logging.DebuggerWriter.Category">
            <summary>
            Gets the category.
            </summary>
            <value>The category.</value>
        </member>
        <member name="T:Blackfin.Core.Logging.LogWriter">
            <summary>
            Write Messages to Common.Logging.
            </summary>
        </member>
        <member name="M:Blackfin.Core.Logging.LogWriter.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Blackfin.Core.Logging.LogWriter"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:Blackfin.Core.Logging.LogWriter.#ctor(System.Type,Common.Logging.LogLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:Blackfin.Core.Logging.LogWriter"/> class.
            </summary>
            <param name="type">The logger source type.</param>
            <param name="level">The log level.</param>
        </member>
        <member name="M:Blackfin.Core.Logging.LogWriter.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.TextWriter"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Blackfin.Core.Logging.LogWriter.Write(System.Char)">
            <summary>
            Writes a character to the text stream.
            </summary>
            <param name="value">The character to write to the text stream.</param>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:Blackfin.Core.Logging.LogWriter.Write(System.String)">
            <summary>
            Writes a string to the text stream.
            </summary>
            <param name="value">The string to write.</param>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:Blackfin.Core.Logging.LogWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a subarray of characters to the text stream.
            </summary>
            <param name="buffer">The character array to write data from.</param>
            <param name="index">Starting index in the buffer.</param>
            <param name="count">The number of characters to write.</param>
            <exception cref="T:System.ArgumentException">The buffer length minus <paramref name="index"/> is less than <paramref name="count"/>. </exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="buffer"/> parameter is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="index"/> or <paramref name="count"/> is negative. </exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.IO.TextWriter"/> is closed. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="M:Blackfin.Core.Logging.LogWriter.Log(System.String)">
            <summary>
            Writes a message to Common.Log 
            </summary>
            <param name="message"></param>
        </member>
        <member name="P:Blackfin.Core.Logging.LogWriter.Encoding">
            <summary>
            When overridden in a derived class, returns the <see cref="T:System.Text.Encoding"/> in which the output is written.
            </summary>
            <value></value>
            <returns>The Encoding in which the output is written.</returns>
        </member>
        <member name="T:Blackfin.Core.Model.Entity`1">
            <summary>
            Base class for a typical Entity - implements Equality/HashCode Identity semantics.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Blackfin.Core.Model.EntityWithKey`2">
            <summary>
            Base class for typical Entity, where you get to specify the key type.
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="T:Blackfin.Core.Resources.ResourceManager">
            <summary>
            Utility class for retrieving various files that are embededded resources in an assembly.
            </summary>
        </member>
        <member name="M:Blackfin.Core.Resources.ResourceManager.GetResource``1(System.String)">
            <summary>
            Gets an embedded resource in the Assembly that type exists in.
            </summary>
            <param name="filename">The filename.</param>
            <returns>a stream to the resource</returns>
        </member>
        <member name="M:Blackfin.Core.Resources.ResourceManager.GetResource(System.Type,System.String)">
            <summary>
            Gets an embedded resource in the Assembly that type exists in.
            </summary>
            <param name="type">The type.</param>
            <param name="filename">The filename.</param>
            <returns>a stream to the resource</returns>
        </member>
        <member name="M:Blackfin.Core.Resources.ResourceManager.GetResource(System.Enum)">
            <summary>
            Gets an embedded resource with a filename equal to the description of the passed in enum.
            </summary>
        </member>
        <member name="M:Blackfin.Core.Resources.ResourceManager.GetXmlSchema(System.Type,System.String)">
            <summary>
            Gets an embedded XML Schema file.
            </summary>
        </member>
    </members>
</doc>
